Find files within current directory that match given patterns, while respecting gitignore rules.

Usage: ff [OPTIONS] <PATTERN>...
       ff [OPTIONS] <PATTERN> [OPTIONS] <PATTERN> ...

Arguments:
  <PATTERN>...
          A pattern to match against each file

Options:
  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version

Walk options:
  -j <JOBS>
          Number of threads to use.
          
          Setting this to zero will choose the number of threads automatically.

  -d, --dir <DIRECTORY>
          Directory to search for files
          
          [default: .]

      --max-depth <DEPTH>
          Maximum depth to recurse into directories

      --follow-links
          Allow to follow symbolic links

  -., --hidden
          Search hidden files and directories.
          
          By default, hidden files and directories are skipped.

      --no-gitignore
          Ignore .gitignore files

      --no-ignore
          Ignore .ignore files

Match options:
  -g
          Parse pattern as a glob expression (default) [global alias: G]

  -r
          Parse pattern as a regular expression.
          
          Note that expressions are unanchored by default. Use '^' or '\\A' to denote start, and '$' or
          '\\z' for the end.

  -i
          Matching files will be included in the output (default) [global alias: I]

  -e
          Matching files will be excluded from the output [global alias: E]

      --no-strip-prefix
          Do not strip './' prefix, same as what GNU find does

Notes:
    -   Capitalized options (.e.g., '-G') apply to all subsequent patterns.
        E.g.: 'ff -g "*.rs" -g "*.md"' is equivalent to 'ff -G "*.rs" "*.md"'.
        You can always unset a flag by overriding it.

    -   Options can be grouped under the same '-'.
        E.g.: 'ff -e -g "*.rs"' is equivalent to 'ff -eg "*.rs"'.

    -   File exclusion is performed after file inclusion.

    -   For performance reasons, prefer to use more general patterns first,
        and more specific ones at the end.
        E.g.: 'ff "*.md" "Cargo.toml"' is (usually) faster but equivalent to 'ff "Cargo.toml" "*.md"'.
